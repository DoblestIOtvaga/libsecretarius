/*** Generated by streamline 0.4.6 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename); (function() {
  var arrayEqual, errString, __slice = [].slice;


  exports.UUID_REG = /[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}/;

  exports.addNull = function(cb) {
    return function() {
      var args;
      args = ((1 <= arguments.length) ? __slice.call(arguments, 0) : []);
      return cb.apply(this, [null,].concat(args)); }; };



  exports.dummyCB = function(e) {
    if ((e != null)) {
      throw e; } ; };



  exports.findElement = function(name, obj) {
    var elem, name_;
    for (name_ in obj) {
      elem = obj[name_];
      if ((name_.toLowerCase() === name)) {
        return elem; } ; }; };




  arrayEqual = function(a, b) {
    var element, index, _i, _len;
    if ((a === b)) {
      return true; } ;

    if ((a.length !== b.length)) {
      return false; } ;

    for (index = _i = 0, _len = a.length; (_i < _len); index = ++_i) {
      element = a[index];
      if ((element !== b[index])) {
        return false; } ; };


    return true; };


  exports.singlify = function(func) {
    var calls;
    calls = [];
    return function() {
      var args, call, caller, cb, _i, _len;
      cb = arguments[0], args = ((2 <= arguments.length) ? __slice.call(arguments, 1) : []);
      for (_i = 0, _len = calls.length; (_i < _len); _i++) {
        call = calls[_i];
        if ((arrayEqual(args, call.args) && (call.context === this))) {
          return call.cbs.push(cb); } ; };


      calls.push(call = {
        args: args,
        cbs: [cb,],
        context: this });

      caller = function() {
        var args, cl, _j, _len1, _ref, _results;
        args = ((1 <= arguments.length) ? __slice.call(arguments, 0) : []);
        calls = (function() {
          var _j, _len1, _results;
          _results = [];
          for (_j = 0, _len1 = calls.length; (_j < _len1); _j++) {
            cl = calls[_j];
            if ((cl !== call)) {
              _results.push(cl); } ; };


          return _results;
        })();
        _ref = call.cbs;
        _results = [];
        for (_j = 0, _len1 = _ref.length; (_j < _len1); _j++) {
          cb = _ref[_j];
          _results.push(cb.apply(this, args)); };

        return _results; };

      return func.apply(this, [caller,].concat(args)); }; };



  exports.debugOn = false;

  exports.enableDebugMode = function() {
    return exports.debugOn = true; };


  errString = function() {
    var b, e, file, func, i, line, s, time, _i, _len, _ref;
    b = Error.prepareStackTrace;
    Error.prepareStackTrace = function(a, stack) {
      return stack; };

    e = new Error;
    Error.captureStackTrace(e, this);
    s = e.stack;
    Error.prepareStackTrace = b;
    time = new Date().toString().match(/\d+:\d+:\d+/)[0];
    file = s[2].getFileName().match(/\/(\w*).\w*$/)[1];
    line = s[2].getLineNumber();
    _ref = s.slice(2);
    for (_i = 0, _len = _ref.length; (_i < _len); _i++) {
      i = _ref[_i];
      func = i.getFunctionName();
      if ((((func != null)) && !/throw2cb/.test(func))) {
        break; } ; };


    func = func.replace(/module.exports./, "");
    return ((((((("" + time) + " ") + func) + " in ") + file) + " at ") + line); };


  exports.debug = function() {
    var args;
    args = ((1 <= arguments.length) ? __slice.call(arguments, 0) : []);
    if (!exports.debugOn) {
      return; } ;

    return console.log.apply(null, [errString(),].concat(args)); };


}).call(this);